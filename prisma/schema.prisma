// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Restrict)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model User {
  id                 String         @id @default(cuid())
  name               String         @map("fullName")
  phone              String         @unique
  role               Role           @default(MANAGER)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  address            String?
  latitude           Float?
  longitude          Float?
  passwordHash       String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  exchangeRatesSet   ExchangeRate[]
  exchangesPerformed Exchanges[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  MANAGER
  ADMIN
}

model Exchanges {
  id             Int          @id @default(autoincrement())
  fromCurrencyId String
  toCurrencyId   String
  fromAmount     Decimal      @db.Decimal(20, 2)
  toAmount       Decimal      @db.Decimal(20, 2)
  rate           ExchangeRate @relation(fields: [exchangeRateId], references: [id])
  createdAt      DateTime     @default(now())
  fromCurrency   Currency     @relation("ExchangeFrom", fields: [fromCurrencyId], references: [id])
  toCurrency     Currency     @relation("ExchangeTo", fields: [toCurrencyId], references: [id])
  User           User         @relation(fields: [userId], references: [id])
  userId         String
  exchangeRateId Int
}

model Currency {
  id            String         @id @default(cuid())
  code          String         @unique
  name          String
  wallets       Wallet[]
  daylyBalances DailyBalance[]
  ratesBase     ExchangeRate[] @relation("BaseCurrency")
  ratesQuote    ExchangeRate[] @relation("QuoteCurrency")
  exchangesFrom Exchanges[]    @relation("ExchangeFrom")
  exchangesTo   Exchanges[]    @relation("ExchangeTo")
}

model ExchangeRate {
  id              Int         @id @default(autoincrement())
  baseCurrencyId  String
  quoteCurrencyId String
  rate            Decimal     @db.Decimal(6, 2)
  createdAt       DateTime    @default(now())
  baseCurrency    Currency    @relation("BaseCurrency", fields: [baseCurrencyId], references: [id])
  quoteCurrency   Currency    @relation("QuoteCurrency", fields: [quoteCurrencyId], references: [id])
  User            User        @relation(fields: [userId], references: [id])
  userId          String
  Exchanges       Exchanges[]

  @@index([baseCurrencyId, quoteCurrencyId, createdAt])
}

model Wallet {
  id         String   @id @default(cuid())
  currencyId String   @unique
  balance    Decimal  @default(0) @db.Decimal(20, 2)
  updatedAt  DateTime @updatedAt
  currency   Currency @relation(fields: [currencyId], references: [id])
}

model DailyBalance {
  id         Int      @id @default(autoincrement())
  date       DateTime @default(now())
  currencyId String
  balance    Decimal  @db.Decimal(20, 2)
  currency   Currency @relation(fields: [currencyId], references: [id])

  @@unique([date, currencyId])
  @@index([currencyId, date])
}

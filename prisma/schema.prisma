// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account
// Stores OAuth/provider account details tied to a `User`.
// Used by NextAuth (or other auth systems) to maintain third-party
// provider tokens, refresh tokens and related metadata.
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Restrict)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

// User
// Represents a system user: admins and managers. Stores contact details,
// authentication-related fields, profile info, and relations to accounts,
// sessions, exchange rates they created and exchanges they performed.
model User {
  id                 String         @id @default(cuid())
  name               String
  phone              String         @unique
  role               Role           @default(MANAGER)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  address            String?
  latitude           Float?
  longitude          Float?
  passwordHash       String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  exchangeRatesSet   ExchangeRate[]
  exchangesPerformed Exchanges[]
  transactions       Transaction[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  MANAGER
  ADMIN
}

// Records individual currency exchange transactions performed by users.
// Links amounts, currencies, the exchange rate used and the user who executed it.
model Exchanges {
  id             Int          @id @default(autoincrement())
  fromCurrencyId String
  toCurrencyId   String
  fromAmount     Decimal      @db.Decimal(20, 2)
  toAmount       Decimal      @db.Decimal(20, 2)
  rate           ExchangeRate @relation(fields: [exchangeRateId], references: [id])
  createdAt      DateTime     @default(now())
  fromCurrency   Currency     @relation("ExchangeFrom", fields: [fromCurrencyId], references: [id])
  toCurrency     Currency     @relation("ExchangeTo", fields: [toCurrencyId], references: [id])
  User           User         @relation(fields: [userId], references: [id])
  userId         String
  exchangeRateId Int
}

// Represents a currency (ISO code, human readable name) used across wallets, exchange rates and transactions.
model Currency {
  id            String         @id @default(cuid())
  code          String         @unique
  name          String
  wallets       Wallet[]
  ratesBase     ExchangeRate[] @relation("BaseCurrency")
  ratesQuote    ExchangeRate[] @relation("QuoteCurrency")
  exchangesFrom Exchanges[]    @relation("ExchangeFrom")
  exchangesTo   Exchanges[]    @relation("ExchangeTo")
  transactions  Transaction[]
}

// Stores historical exchange rates between a base and quote currency.
// Each rate is created by a user and can be used to record exchange transactions.
model ExchangeRate {
  id              Int         @id @default(autoincrement())
  baseCurrencyId  String
  quoteCurrencyId String
  rate            Decimal     @db.Decimal(6, 2)
  createdAt       DateTime    @default(now())
  baseCurrency    Currency    @relation("BaseCurrency", fields: [baseCurrencyId], references: [id])
  quoteCurrency   Currency    @relation("QuoteCurrency", fields: [quoteCurrencyId], references: [id])
  User            User        @relation(fields: [userId], references: [id])
  userId          String
  Exchanges       Exchanges[]

  @@index([baseCurrencyId, quoteCurrencyId, createdAt])
}

// Tracks the balance for a single currency (per logical account/branch).
// Holds a precise decimal balance and updated timestamp.
model Wallet {
  id          String        @id @default(cuid())
  currencyId  String        @unique
  balance     Decimal       @default(0) @db.Decimal(20, 2)
  updatedAt   DateTime      @updatedAt
  currency    Currency      @relation(fields: [currencyId], references: [id])
  Transaction Transaction[]
}

// TransactionType
// Enumerates the kinds of balance-affecting transactions.
enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  EXCHANGE
  ADJUSTMENT
}

// Transaction
// Records a single balance-affecting transaction. Can represent deposits,
// withdrawals, exchanges or administrative adjustments. Links to the user who
// performed the action and the currency affected. Optionally references an
// `Exchanges` record when the transaction originates from an exchange.
model Transaction {
  id           Int             @id @default(autoincrement())
  type         TransactionType
  amount       Decimal         @db.Decimal(20, 2)
  currencyId   String
  currency     Currency        @relation(fields: [currencyId], references: [id])
  userId       String
  user         User            @relation(fields: [userId], references: [id])
  description  String?
  balanceAfter Decimal?        @db.Decimal(20, 2)
  createdAt    DateTime        @default(now())
  wallet       Wallet          @relation(fields: [walletId], references: [id])
  walletId     String

  @@index([currencyId])
  @@index([userId])
  @@index([createdAt])
}
